The big picture:
Application layer <-> Transport layer (TCP, UDP, STCP, raw socket) <-> Network layer (IP) <-> Data link <-> Physical

UDP: 
	- Simple transport layer protocol. 
	- Flow: 
		. The application writes a message to a UDP socket
		-> The packet is then encapsulated in a UDP datagram
		-> Encapsulated as an IP datagram
		-> Be sent to the destination
	- Unreliable:
		. There's no guarantee:
			. The packet reached the destination
			. Packets arrived in correct order
		. If a packet get lost, no retransmission is activated.
		. Each datagram has a length packed with it, send to the receiving application.
		. Connectionless service: 
			. No long-term relationship between client and server
			. Client can send datagram to 1 server then immediately send another datagram to another server.

TCP:
	- Provide reliable connections between servers and clients:
		. When TCP sends data to the other end, it requires an acknowledgement in return
			. If ACK not return -> Retransmit the data, and waits for a longer amount of time:
				> TCP contains estimation of RTT -> estimate waiting time
			. Give up after a number of times of retransmission
		. Sequences the data to reordering packets:
			> Associate a sequence number with everybyte that it sends
			> Detect duplicate packets
		. Flow control:
			> It tells its peers how many data it's willing to accept
			> The data cannot be overflowed, if the current amount is 0 -> need to wait until the server's done its processing
			> Each field by window size = 16 bits 
		. Full-duplex:
			> Send and receive data in both directions
			> Need to keep track the states of the connection in both directions (sequence number, window size)	



Three-way handshake:
	1. The server prepared to accept connections (socket, bind, listen): passive open
	2. The client issues an active open by calling 'connect':
		. Client TCP sends a SYN segment, includes:
			> Initial sequence number for the data to be sent
			> Possible TCP options
			> No data
	3. The server sends its SYN and sends ACK of the client's SYN in a single segment
	4. The client must send back ACK to the server

Terminating:
	1. One end sends a FIN tag
	2. The other sends an ACK with another FIN tag
	3. Sends back ACK
	- The TIME_WAIT state remains 2*maximum segment lifetime:
		. Keep the port, (if new server )

Fork():
	- Fork child process
	- Return pid > 0 in the parent, indicate the program id of the child process
	- Return 0 in the child process itself


I/O block issue:
	- Non-blocking I/O: keep checking, return EWOULDBLOCK if the fd is not ready
	- I/O Multiplexing: using select to block a group of fds, return when one of them is ready
	- Signal: using kernel signal, notify if there's a fd is ready
	- Asynchronus I/O: do the I/O but would not block the process, notify if the I/O is completed.


THREAD:
	- Thread ID
	- Set of register values
	- A stack
	- A scheduling priority and policy
	- A signal mask
	- An errno variable
	- Thread specific data

SIGNAL:
	- Software Interupt
	- Concept:
		. Start with SIG
		. System defined signals
		. Application defined signals


Inter process communication:
	- Send SIGNAL to other process using kill() 
	- Using pipe: 
		. 1 end to read, 1 end to write
	- Using FIFO file:
		. Using mknod(FIFO_NAME, S_IFIFO | 0666, 0); function to create a file for communication between process
		. Like pipe() but unrelated processes can connect to 1 file.
	- File locking:
		. Read lock & write lock using struct flock and fcntl() function
	- Message queues:
		. Like FIFO
		. Create a key using ftok() function
		. Get message queue from key using msgget() function
		. Send any kind of structure by msgsnd() function
	- Semaphores:
	- Shared memory segments:
		. Get a pointer to shared memory segment that everybody can access